---
description: 
globs: 
alwaysApply: false
---
---
description: To be used when implementing new features or code improvements
---

Design and implement the request described above using a systematic, validation-driven approach:

1. **Analyze Context**:
   - Identify relevant patterns, conventions, or domain models using `codebase_search`.
   - Pinpoint integration pointsâ€”e.g., UI components, data layers, or APIs.
   - Verify alignment with Hexagonal Architecture principles.
   - Check existing test patterns and coverage requirements.

2. **Specify Requirements**:
   - Break the request into clear, testable criteria.
   - Define use cases (normal and edge) and constraints.
   - Set scope boundaries to keep the implementation focused.
   - Ensure WCAG2 compliance and i18n support.

3. **Leverage Reusability**:
   - Search for existing components or utilities with `codebase_search`.
   - Use `grep_search` to confirm similar implementations.
   - Evaluate if the feature could be abstracted for future reuse.
   - Check `shared/` directory for common utilities and patterns.

4. **Plan Targeted Changes**:
   - List all files requiring edits, dependencies to update, and new files.
   - Assess impacts on cross-cutting concerns.
   - Balance immediate needs with long-term code health.
   - Ensure API routes are defined in `shared/constants/apiRoutes.ts`.

5. **Implement with Precision**:
   - Provide a step-by-step plan with specific code changes.
   - Adhere to project conventions:
     * Components: PascalCase
     * Hooks: `use` + camelCase
     * Utilities: camelCase
     * Constants: UPPER_SNAKE_CASE
   - Follow Prettier and ESLint rules.
   - Highlight enhancements to organization or clarity.

6. **Validate and Stabilize**:
   - Define test scenarios for normal, edge, and failure cases.
   - Ensure 90%+ test coverage for new code.
   - Use Jest & Testing Library for unit tests, Cypress for E2E tests.
   - Follow test patterns:
     * Use `I18nextProvider` and `MemoryRouter` for integration
     * Mock only what is necessary
     * For route tests, mock layouts with `<Outlet />`

7. **Test Environment Safety**:
   - Never modify `process.env` directly in tests
   - Use `jest.spyOn` for environment variable mocking:
     ```typescript
     let envSpy: jest.SpyInstance;
     
     beforeEach(() => {
       envSpy = jest.spyOn(process.env, 'VARIABLE_NAME', 'get')
         .mockReturnValue('test-value');
     });
     
     afterEach(() => {
       envSpy.mockRestore();
     });
     ```
   - Ensure test isolation by restoring all spies and mocks
   - Design tests to work correctly in parallel execution
   - Clean up environment modifications to prevent test pollution

8. **Test Configuration**:
   - Configure ALL mocks BEFORE importing the module to test
   - Use `jest.isolateModules()` to prevent test pollution
   - Clean mocks and state in `beforeEach`
   - Restore mocks and spies in `afterEach/afterAll`
   - Document test purpose with clear comments
   - Verify environment variables are correctly mocked
   - Use `expect.any()` for dynamic values instead of hardcoding

9. **State Management**:
   - Clean state between tests
   - Restore original environment variables
   - Verify mocks don't affect other tests
   - Use `beforeEach` for setup and `afterEach` for cleanup
   - Document test dependencies
   - Avoid shared state between tests
   - Verify state is properly restored

10. **Documentation**:
    - Explain each test's purpose
    - Document non-obvious test cases
    - Explain mock configuration
    - Document state management
    - Explain expectations
    - Document debugging process
    - Keep documentation updated

This process delivers a well-integrated, reliable solution that enhances the codebase while meeting the request's goals.
